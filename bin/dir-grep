#!/bin/bash
set -eo pipefail

if test "$DEBUG" = "`basename $0`"; then
	set -x
fi

function show_usage() {
	echo -e "usage: `basename $0` [query] [directory] [OPTIONS] -- [GREP OPTIONS]"
	echo -e "Runs grep over several files."
	echo -e ""
	echo -e "\tquery\tgrep-formatted query"
	echo -e "\tdirectory\tpath to the directory where the files exist (default: '.')"
	echo -e ""
	echo -e "Options:"
	echo -e ""
	echo -e "\t--ext, -e [file exts]\tglob to match file patterns (passed to \`find\`) (default: '*')"
	echo -e ""
	echo -e "After '--', all options are passed unparsed to grep. This also forcefully overrides the default grep flags (E, i, colors=always)"
	echo -e ""
	exit 1
}

text=""
targetDir=""
filePattern="*"
grepFlags="-E -i --color=always"
showNamesOnly="false"
while test "$#" -gt "0"; do
	case "$1" in
		--help|-h)
			shift
			show_usage
			;;

		--ext|-e)
			shift
			filePattern="$1"
			shift || show_usage
			;;

		--name-only)
			shift
			showNamesOnly="true"
			;;

		--)
			shift
			grepFlags=""
			while test "$#" -gt "0"; do
				grepFlags="$grepFlags $1"
				shift
			done
			;;

		-*)
			echo "Unknown flag: $1"
			show_usage
			;;

		*)
			if test -z "$text"; then
				text="$1"
			elif test -z "$targetDir"; then
				targetDir="$1"
			else
				echo "Unexpected arg: $1"
				show_usage
			fi
			shift
			;;
	esac
done

if test -z "$text"; then
	echo "Search pattern is required."
	show_usage
fi
if test -z "$targetDir"; then
	targetDir="."
fi

# validate pattern + flags
echo '.' | grep $grepFlags . >/dev/null

# visit all relevant files
echo ""
find $targetDir -name "$filePattern" -type f | while read i; do
	tmp="`mktemp`"

	echo -en "\r"
	tput el
	echo -en "\r${i:0:100}"
	if ! test -z "${i:101}"; then
		echo -n "..."
	fi

	if cat -n "$i" | grep $grepFlags "$text" > "$tmp"; then
		echo -en "\r"
		tput el

		if test "$showNamesOnly" = "true"; then
			echo "$i"
		else
			echo "$i:"
			cat "$tmp"
			echo ""
		fi
	fi
done

echo -en "\r"
tput el

